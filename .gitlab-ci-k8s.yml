# GitLab CI/CD Pipeline for OSDU-CI Development Environment
# Hybrid approach: Fast validation + Basic Kubernetes testing (no Ingress/Flux)

stages:
  - validate
  - test-kubernetes

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_CERTDIR: ""

# Fast validation jobs (same as before)
validate-structure:
  stage: validate
  image: alpine:latest
  script:
    - echo "üîç Validating OSDU-CI project structure..."
    - test -f Makefile && echo "‚úÖ Makefile found"
    - test -f README.md && echo "‚úÖ README found"
    - test -d infra/scripts && echo "‚úÖ Scripts directory found"
    - test -d software && echo "‚úÖ Software directory found"
    - test -f infra/scripts/cluster-up.sh && echo "‚úÖ cluster-up.sh found"
    - test -f infra/kubernetes/kind-config.yaml && echo "‚úÖ Kind config found"
    - echo "‚úÖ Project structure validation passed"

validate-makefile:
  stage: validate
  image: alpine:latest
  before_script:
    - apk add --no-cache make bash
  script:
    - echo "üîß Testing Makefile interface..."
    - make help | grep -q "OSDU-CI Development Environment"
    - make -n up >/dev/null
    - make -n test >/dev/null
    - make -n clean >/dev/null
    - echo "‚úÖ Makefile validation passed"

# Basic Kubernetes testing (without Ingress/Flux)
test-kubernetes-basic:
  stage: test-kubernetes
  image: docker:27.0.3
  services:
    - name: docker:27.0.3-dind
      alias: docker
      command: ["--privileged"]
  variables:
    FF_NETWORK_PER_BUILD: 1
    KUBECONFIG: "$CI_PROJECT_DIR/data/kubeconfig/config"
  before_script:
    - echo "üõ†Ô∏è Installing Kubernetes tools..."
    - apk add --no-cache make bash curl jq
    
    # Install Kind
    - curl -Lo /usr/local/bin/kind https://kind.sigs.k8s.io/dl/v0.25.0/kind-linux-amd64
    - chmod +x /usr/local/bin/kind
    
    # Install kubectl
    - curl -LO "https://dl.k8s.io/release/v1.31.0/bin/linux/amd64/kubectl"
    - chmod +x kubectl && mv kubectl /usr/local/bin/
    
    - echo "‚úÖ Tools installed"
    - kind version && kubectl version --client && docker version
    
  script:
    - echo "üöÄ Testing basic Kubernetes functionality..."
    
    # Create minimal Kind cluster (no add-ons)
    - echo "Step 1: Creating minimal Kind cluster..."
    - |
      cat <<EOF > kind-config-test.yaml
      kind: Cluster
      apiVersion: kind.x-k8s.io/v1alpha4
      nodes:
      - role: control-plane
      networking:
        apiServerAddress: "0.0.0.0"
      kubeadmConfigPatches:
      - |
        kind: ClusterConfiguration
        apiServer:
          certSANs:
          - "docker"
      EOF
    - kind create cluster --name test-cluster --config kind-config-test.yaml --wait 300s
    - echo "‚úÖ Kind cluster created successfully"
    
    # Fix kubeconfig for CI networking
    - echo "Step 2: Configuring kubectl connectivity..."
    - kind export kubeconfig --name test-cluster --kubeconfig $KUBECONFIG
    - sed -i.bak -E -e "s/localhost|0\.0\.0\.0/docker/g" "$KUBECONFIG"
    - echo "‚úÖ Kubeconfig configured for CI"
    
    # Test basic cluster functionality
    - echo "Step 3: Testing cluster functionality..."
    - kubectl wait --for=condition=Ready nodes --all --timeout=300s
    - kubectl get nodes
    - kubectl get pods -A
    - echo "‚úÖ Cluster is ready and accessible"
    
    # Test basic pod operations
    - echo "Step 4: Testing pod creation..."
    - kubectl run test-pod --image=busybox --restart=Never --rm -i --timeout=60s -- echo "Hello from Kubernetes"
    - echo "‚úÖ Pod creation and execution successful"
    
    # Test service creation
    - echo "Step 5: Testing service creation..."
    - kubectl create deployment nginx-test --image=nginx:alpine
    - kubectl expose deployment nginx-test --port=80 --target-port=80
    - kubectl wait --for=condition=available --timeout=120s deployment/nginx-test
    - kubectl get services nginx-test
    - kubectl delete deployment nginx-test
    - kubectl delete service nginx-test
    - echo "‚úÖ Service creation and cleanup successful"
    
    - echo "üéâ Basic Kubernetes testing completed successfully!"
    - echo "‚úÖ Kind cluster creation works in GitLab CI"
    - echo "‚úÖ Docker-in-Docker networking functional"
    - echo "‚úÖ Kubectl connectivity established"
    - echo "‚úÖ Pod creation and execution working"
    - echo "‚úÖ Service creation and networking working"
    
  after_script:
    - echo "üßπ Cleaning up test cluster..."
    - kind delete cluster --name test-cluster || true
    - echo "‚úÖ Cleanup completed"

# Summary job
integration-summary:
  stage: test-kubernetes
  image: alpine:latest
  dependencies: []
  script:
    - echo "üìä OSDU-CI Integration Test Results:"
    - echo ""
    - echo "‚úÖ GitLab CI Validation:"
    - echo "  ‚Ä¢ Project structure validated"
    - echo "  ‚Ä¢ Makefile interface tested"
    - echo "  ‚Ä¢ Configuration files checked"
    - echo ""
    - echo "‚úÖ Kubernetes Core Testing:"
    - echo "  ‚Ä¢ Kind cluster creation successful"
    - echo "  ‚Ä¢ Docker-in-Docker networking working"
    - echo "  ‚Ä¢ Basic pod operations functional"
    - echo "  ‚Ä¢ Service creation working"
    - echo ""
    - echo "üîÑ For Full GitOps Testing:"
    - echo "  ‚Ä¢ Use 'make up' locally for Flux + Ingress"
    - echo "  ‚Ä¢ GitHub Actions for comprehensive CI testing"
    - echo ""
    - echo "‚úÖ OSDU-CI core functionality validated!"
  when: on_success