# Multi-Tier: Ingress showcase with multiple services and path routing
# Requires: INGRESS_ENABLED=true
# Access: http://localhost/frontend, http://localhost/api

---
# Frontend Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: frontend
    hostk8s.app: multi-tier
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        volumeMounts:
        - name: html
          mountPath: /usr/share/nginx/html
      volumes:
      - name: html
        configMap:
          name: frontend-html

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-html
  labels:
    hostk8s.app: multi-tier
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>HostK8s Frontend</title>
        <meta charset="UTF-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f0f8ff; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .header { padding: 20px; background: #e7f3ff; border: 1px solid #b3d9ff; border-radius: 5px; color: #004085; }
            .api-section { background: #fff3cd; padding: 15px; border-radius: 5px; color: #856404; margin: 20px 0; }
            h1 { color: #0066cc; text-align: center; }
            .btn { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 5px; }
            .btn:hover { background: #0056b3; }
            #api-result { background: #f8f9fa; padding: 15px; border-radius: 5px; margin-top: 10px; font-family: monospace; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üåê Frontend Service</h1>

            <div class="header">
                <h2>üéØ Ingress Demo</h2>
                <p>This frontend is served via <strong>path-based routing</strong> on the ingress controller.</p>
                <ul>
                    <li><strong>Frontend:</strong> <a href="/frontend/">/frontend/</a></li>
                    <li><strong>API:</strong> <a href="/api/">/api/</a></li>
                </ul>
            </div>

            <div class="api-section">
                <h3>üîå API Integration Test</h3>
                <p>Test service-to-service communication via ingress:</p>
                <button class="btn" onclick="callAPI()">Call API Service</button>
                <div id="api-result"></div>
            </div>
        </div>

        <script>
        async function callAPI() {
            const result = document.getElementById('api-result');
            result.innerHTML = 'Calling API...';

            try {
                const response = await fetch('/api/');
                const text = await response.text();
                result.innerHTML = `<strong>API Response:</strong><br>${text}`;
            } catch (error) {
                result.innerHTML = `<strong>Error:</strong> ${error.message}`;
            }
        }
        </script>
    </body>
    </html>

---
apiVersion: v1
kind: Service
metadata:
  name: frontend
  labels:
    hostk8s.app: multi-tier
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP

---
# API Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  labels:
    app: api
    hostk8s.app: multi-tier
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        volumeMounts:
        - name: html
          mountPath: /usr/share/nginx/html
      volumes:
      - name: html
        configMap:
          name: api-html

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-html
  labels:
    hostk8s.app: multi-tier
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>HostK8s API</title>
        <meta charset="UTF-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f0fff0; }
            .container { max-width: 600px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .api-info { padding: 20px; background: #d4edda; border: 1px solid #c3e6cb; border-radius: 5px; color: #155724; }
            h1 { color: #28a745; text-align: center; }
            code { background: #f8f9fa; padding: 2px 6px; border-radius: 3px; color: #e83e8c; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöÄ API Service</h1>

            <div class="api-info">
                <h2>‚úÖ API Service Active</h2>
                <p>This API service demonstrates:</p>
                <ul>
                    <li><strong>Path-based routing:</strong> <code>/api/</code></li>
                    <li><strong>Service discovery:</strong> ClusterIP communication</li>
                    <li><strong>Ingress routing:</strong> HTTP request routing</li>
                    <li><strong>Multi-service apps:</strong> Frontend + API separation</li>
                </ul>

                <h3>üìä Service Info</h3>
                <ul>
                    <li><strong>Service:</strong> api.default.svc.cluster.local</li>
                    <li><strong>Replicas:</strong> 2</li>
                    <li><strong>Access:</strong> http://localhost/api/</li>
                </ul>
            </div>
        </div>
    </body>
    </html>

---
apiVersion: v1
kind: Service
metadata:
  name: api
  labels:
    hostk8s.app: multi-tier
spec:
  selector:
    app: api
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP

---
# Ingress with path-based routing
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app2-ingress
  labels:
    hostk8s.app: multi-tier
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
  - host: localhost
    http:
      paths:
      - path: /frontend
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: api
            port:
              number: 80
