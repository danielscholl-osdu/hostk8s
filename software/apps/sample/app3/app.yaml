# App3: Production patterns with MetalLB + Ingress + Multi-tier architecture
# Requires: METALLB_ENABLED=true AND INGRESS_ENABLED=true
# Access: http://localhost/app3/ (ingress) AND LoadBalancer external IPs
# Demonstrates: Service mesh, LoadBalancer services, production networking
# Frontend Application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  labels:
    app: frontend
    osdu-ci.app: app3
    tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        tier: frontend
    spec:
      containers:
      - name: frontend
        image: nginx:alpine
        ports:
        - containerPort: 80
        env:
        - name: API_URL
          value: "http://api"
        resources:
          requests:
            memory: "32Mi"
            cpu: "25m"
          limits:
            memory: "64Mi"
            cpu: "50m"
        volumeMounts:
        - name: frontend-content
          mountPath: /usr/share/nginx/html
      volumes:
      - name: frontend-content
        configMap:
          name: frontend-content
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-content
  labels:
    osdu-ci.app: app3
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Multi-Service Demo</title>
        <meta charset="UTF-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #f8f9fa; }
            .container { max-width: 800px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .service { margin: 20px 0; padding: 20px; border-radius: 5px; }
            .frontend { background: #d4edda; border: 1px solid #c3e6cb; }
            .api { background: #d1ecf1; border: 1px solid #bee5eb; }
            .database { background: #f8d7da; border: 1px solid #f5c6cb; }
            h1 { color: #495057; text-align: center; }
            h3 { margin-top: 0; }
            .status { font-weight: bold; color: #28a745; }
            code { background: #f8f9fa; padding: 2px 6px; border-radius: 3px; }
            .test-btn { background: #007bff; color: white; padding: 10px 20px; border: none; border-radius: 5px; cursor: pointer; margin: 5px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üèóÔ∏è Multi-Service Application Demo</h1>

            <div class="service frontend">
                <h3>üé® Frontend Service</h3>
                <p><span class="status">Status: Running</span></p>
                <p><strong>Purpose:</strong> User interface and API communication</p>
                <p><strong>API Endpoint:</strong> <code>http://api</code></p>
                <button class="test-btn" onclick="testAPI()">Test API Connection</button>
            </div>

            <div class="service api">
                <h3>üîå API Service</h3>
                <p><span class="status">Status: Running</span></p>
                <p><strong>Purpose:</strong> Business logic and database communication</p>
                <p><strong>Database:</strong> <code>postgresql://database:5432/appdb</code></p>
                <button class="test-btn" onclick="testDatabase()">Test Database Connection</button>
            </div>

            <div class="service database">
                <h3>üóÑÔ∏è Database Service</h3>
                <p><span class="status">Status: Running</span></p>
                <p><strong>Purpose:</strong> Data persistence</p>
                <p><strong>Type:</strong> PostgreSQL 15</p>
            </div>

            <div style="margin-top: 30px; padding: 20px; background: #e9ecef; border-radius: 5px;">
                <h3>üß™ Testing Commands</h3>
                <p>Test service-to-service communication:</p>
                <ul>
                    <li><code>kubectl get pods -o wide</code> - View all pods and their IPs</li>
                    <li><code>kubectl exec -it deployment/frontend -- wget -qO- http://api</code></li>
                    <li><code>kubectl exec -it deployment/api -- nc -zv database 5432</code></li>
                    <li><code>kubectl logs deployment/api</code> - View API logs</li>
                </ul>
            </div>
        </div>

        <script>
            function testAPI() {
                // In a real app, this would make an actual API call
                alert('In a real app, this would test:\nGET http://api/health\n\nFor now, use: kubectl exec -it deployment/frontend -- wget -qO- http://api');
            }

            function testDatabase() {
                alert('In a real app, the API would test database connectivity.\n\nFor now, use: kubectl exec -it deployment/api -- nc -zv database 5432');
            }
        </script>
    </body>
    </html>
---
# Frontend LoadBalancer Service (external access)
apiVersion: v1
kind: Service
metadata:
  name: frontend-lb
  labels:
    tier: frontend
    osdu-ci.app: app3
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer
---
# API Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  labels:
    app: api
    osdu-ci.app: app3
    tier: api
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
        tier: api
    spec:
      containers:
      - name: api
        image: nginx:alpine  # Placeholder - would be your API image
        ports:
        - containerPort: 80
        env:
        - name: DATABASE_URL
          value: "postgresql://appuser:apppass@database:5432/appdb"
        - name: PORT
          value: "80"
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        volumeMounts:
        - name: api-config
          mountPath: /usr/share/nginx/html
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: api-config
        configMap:
          name: api-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: api-config
  labels:
    osdu-ci.app: app3
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>API Service</title>
        <meta charset="UTF-8">
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; }
            .container { max-width: 600px; margin: 0 auto; }
            .api-status { padding: 20px; background: #e8f4f8; border-radius: 5px; }
            code { background: #f4f4f4; padding: 2px 6px; border-radius: 3px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üîå API Service</h1>
            <div class="api-status">
                <h2>API Status: Running</h2>
                <p><strong>Database:</strong> postgresql://database:5432/appdb</p>
                <p><strong>Endpoints:</strong></p>
                <ul>
                    <li><code>GET /health</code> - Health check</li>
                    <li><code>GET /ready</code> - Readiness check</li>
                    <li><code>GET /api/users</code> - User data</li>
                </ul>
            </div>
        </div>
    </body>
    </html>
  health: |
    OK
  ready: |
    Ready
---
apiVersion: v1
kind: Service
metadata:
  name: api
  labels:
    tier: api
    osdu-ci.app: app3
spec:
  selector:
    app: api
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
# API LoadBalancer Service (external access)
apiVersion: v1
kind: Service
metadata:
  name: api-lb
  labels:
    tier: api
    osdu-ci.app: app3
spec:
  selector:
    app: api
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer
---
# PostgreSQL Database
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database
  labels:
    app: database
    osdu-ci.app: app3
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
        tier: database
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: "appdb"
        - name: POSTGRES_USER
          value: "appuser"
        - name: POSTGRES_PASSWORD
          value: "apppass"
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-data
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: database
  labels:
    tier: database
    osdu-ci.app: app3
spec:
  selector:
    app: database
  ports:
  - port: 5432
    targetPort: 5432
  type: ClusterIP
---
# Production Ingress with multiple path routing
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: app3-ingress
  labels:
    osdu-ci.app: app3
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$2
spec:
  ingressClassName: nginx
  rules:
  - host: localhost
    http:
      paths:
      - path: /app3/frontend(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: frontend
            port:
              number: 80
      - path: /app3/api(/|$)(.*)
        pathType: ImplementationSpecific
        backend:
          service:
            name: api
            port:
              number: 80
