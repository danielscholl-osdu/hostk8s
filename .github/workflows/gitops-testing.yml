name: HostK8s Cluster Testing

run-name: ${{ github.event_name == 'repository_dispatch' && format('GitLab Pipeline {0} - Cluster Testing', github.event.client_payload.gitlab_pipeline_id) || 'HostK8s Cluster Testing' }}

on:
  repository_dispatch:
    types: [gitlab-ci-success]
  workflow_dispatch:
    inputs:
      test_scenario:
        description: 'GitOps test scenario to run'
        required: false
        default: 'full'
        type: choice
        options:
          - minimal
          - full
          - gitops

jobs:
  cluster-minimal:
    runs-on: ubuntu-latest
    timeout-minutes: 8
    outputs:
      flux_status: ${{ steps.flux_validation.outputs.status }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.gitlab_commit_sha || github.sha }}

      - name: Log GitLab trigger context
        if: github.event_name == 'repository_dispatch'
        run: |
          echo "üîç Cluster testing triggered by GitLab CI"
          echo "GitLab Pipeline ID: ${{ github.event.client_payload.gitlab_pipeline_id }}"
          echo "GitLab Commit: ${{ github.event.client_payload.gitlab_commit_sha }}"
          echo "GitLab Branch: ${{ github.event.client_payload.gitlab_ref }}"
          echo "GitLab Pipeline URL: ${{ github.event.client_payload.gitlab_pipeline_url }}"
          echo ""
          if [ "${{ github.event.client_payload.gitlab_ref }}" = "main" ]; then
            echo "üöÄ Main branch detected - Full testing will run (minimal + default clusters)"
          else
            echo "üîÑ PR branch detected - Fast testing will run (minimal cluster only)"
            echo "üìù Branch: ${{ github.event.client_payload.gitlab_ref }}"
          fi

      - name: Create minimal Kind cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: hostk8s-minimal
          node_image: kindest/node:v1.33.2
          config: infra/kubernetes/kind-minimal.yaml

      - name: Install Flux CLI
        run: |
          echo "üì• Installing Flux CLI..."
          curl -s https://fluxcd.io/install.sh | sudo bash
          flux version --client
          echo "‚úÖ Flux CLI installed"

      - name: Bootstrap Flux and test basic reconciliation
        id: flux_validation
        run: |
          echo "üöÄ Testing basic Flux GitOps reconciliation..."

          # Install Flux system
          echo "üì¶ Installing Flux system..."
          flux install --timeout=300s

          # Wait for Flux system to be ready
          echo "‚è≥ Waiting for Flux system readiness..."
          kubectl wait --for=condition=ready pod -l app=source-controller -n flux-system --timeout=180s
          kubectl wait --for=condition=ready pod -l app=kustomize-controller -n flux-system --timeout=180s
          kubectl wait --for=condition=ready pod -l app=helm-controller -n flux-system --timeout=180s
          kubectl wait --for=condition=ready pod -l app=notification-controller -n flux-system --timeout=180s

          # Create basic GitRepository source
          echo "üîó Creating GitRepository source..."
          flux create source git hostk8s-source \
            --url=https://github.com/danielscholl-osdu/osdu-ci \
            --branch=main \
            --interval=1m \
            --timeout=60s

          # Verify source reconciliation
          echo "‚è≥ Waiting for GitRepository reconciliation..."
          sleep 30
          flux reconcile source git hostk8s-source --timeout=60s

          # Validate Flux system health
          echo "üìä Flux system status:"
          kubectl get pods -n flux-system
          echo ""

          echo "üìä GitRepository source status:"
          flux get sources git
          echo ""

          echo "üìä Enhanced GitOps reconciliation status:"
          echo "================================"

          echo "üéØ GitRepository Source Details:"
          flux get sources git hostk8s-source -n flux-system || echo "GitRepository source not found"
          echo ""

          echo "üìã All Git Sources:"
          flux get sources git -A
          echo ""

          echo "üìã Helm Sources:"
          flux get sources helm -A || echo "No Helm sources configured"
          echo ""

          echo "üìã Kustomizations:"
          flux get kustomizations -A || echo "No Kustomizations configured"
          echo ""

          echo "üìã Complete GitOps Status:"
          flux get all
          echo ""

          echo "üéØ Test Scope: GitRepository Source Validation Only"
          echo "==============================================="
          echo "‚úÖ Flux system installation: TESTED"
          echo "‚úÖ GitRepository source creation: TESTED"
          echo "‚úÖ Source reconciliation: TESTED"
          echo "‚ùå Kustomizations: NOT APPLIED (intentional - this is a minimal smoke test)"
          echo "‚ùå Application deployments: NOT TESTED"
          echo ""
          echo "üìù This test validates basic Flux infrastructure without GitOps applications."
          echo "   For full GitOps testing with Kustomizations, see cluster-default job."
          echo ""

          # Check for reconciliation success
          if flux get sources git | grep -q "True"; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "‚úÖ Basic Flux reconciliation successful"
          else
            echo "status=failed" >> $GITHUB_OUTPUT
            echo "‚ùå Basic Flux reconciliation failed"
            flux logs --all-namespaces
            exit 1
          fi

  cluster-default:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: ${{ github.event.inputs.test_scenario != 'minimal' }}
    outputs:
      gitops_status: ${{ steps.gitops_validation.outputs.status }}
      reconciliation_summary: ${{ steps.gitops_validation.outputs.summary }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.client_payload.gitlab_commit_sha || github.sha }}

      - name: Report GitOps testing start to GitLab
        if: github.event_name == 'repository_dispatch' && github.event.client_payload.gitlab_commit_sha
        run: |
          echo "üì§ Reporting GitOps test start to GitLab..."
          curl -X POST \
            -H "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://community.opengroup.org/api/v4/projects/${{ github.event.client_payload.gitlab_project_id }}/statuses/${{ github.event.client_payload.gitlab_commit_sha }}" \
            -d "{
              \"state\": \"running\",
              \"target_url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
              \"description\": \"GitOps reconciliation tests starting...\",
              \"context\": \"github-actions/cluster-testing\"
            }" || echo "‚ö†Ô∏è Failed to report to GitLab (non-blocking)"

      - name: Create full Kind cluster with registry
        uses: helm/kind-action@v1
        with:
          cluster_name: hostk8s-gitops
          node_image: kindest/node:v1.33.2
          config: infra/kubernetes/kind-custom.yaml
          registry: true

      - name: Install additional tools
        run: |
          echo "üì• Installing additional tools..."
          curl -s https://fluxcd.io/install.sh | sudo bash
          helm version && flux version --client
          echo "‚úÖ Additional tools installed"

      - name: Install infrastructure prerequisites
        run: |
          echo "üèóÔ∏è Installing infrastructure prerequisites..."

          # Install MetalLB
          echo "üì¶ Installing MetalLB..."
          kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.14.8/config/manifests/metallb-native.yaml
          kubectl wait --namespace metallb-system --for=condition=ready pod --selector=app=metallb --timeout=300s

          # Configure MetalLB IP pool
          kubectl apply -f - <<EOF
          apiVersion: metallb.io/v1beta1
          kind: IPAddressPool
          metadata:
            name: example
            namespace: metallb-system
          spec:
            addresses:
            - 172.19.255.200-172.19.255.250
          ---
          apiVersion: metallb.io/v1beta1
          kind: L2Advertisement
          metadata:
            name: empty
            namespace: metallb-system
          EOF

          # Install NGINX Ingress
          echo "üì¶ Installing NGINX Ingress..."
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/kind/deploy.yaml
          kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=300s

          echo "‚úÖ Infrastructure prerequisites installed"

      - name: Test complete GitOps reconciliation
        id: gitops_validation
        run: |
          echo "üöÄ Testing complete GitOps reconciliation..."

          # Install Flux system
          echo "üì¶ Installing Flux system..."
          flux install --timeout=300s

          # Wait for Flux system readiness
          echo "‚è≥ Waiting for Flux system readiness..."
          kubectl wait --for=condition=ready pod -l app=source-controller -n flux-system --timeout=180s
          kubectl wait --for=condition=ready pod -l app=kustomize-controller -n flux-system --timeout=180s
          kubectl wait --for=condition=ready pod -l app=helm-controller -n flux-system --timeout=180s
          kubectl wait --for=condition=ready pod -l app=notification-controller -n flux-system --timeout=180s

          # Create PR-specific GitRepository source for testing
          GITOPS_REPO="${{ github.event.client_payload.gitops_repo || 'https://github.com/danielscholl-osdu/osdu-ci' }}"
          GITOPS_BRANCH="${{ github.event.client_payload.gitlab_ref || 'main' }}"

          echo "üéØ GitOps Configuration for Testing:"
          echo "   Repository: $GITOPS_REPO"
          echo "   Branch: $GITOPS_BRANCH"
          echo "   Testing Strategy: Branch-specific GitOps validation"

          # Skip static sources and create PR-specific source with highest priority
          echo "üîó Creating PR-specific GitRepository source (overriding any static sources)..."
          flux create source git hostk8s-self \
            --url="$GITOPS_REPO" \
            --branch="$GITOPS_BRANCH" \
            --interval=30s \
            --timeout=60s \
            --export > /tmp/pr-gitrepo.yaml

          echo "üìã PR GitRepository source definition:"
          cat /tmp/pr-gitrepo.yaml
          kubectl apply -f /tmp/pr-gitrepo.yaml

          # Wait for the PR-specific source to be ready
          echo "‚è≥ Waiting for PR GitRepository source to be ready..."
          kubectl wait --for=condition=ready gitrepository/hostk8s-self -n flux-system --timeout=120s

          # Verify what we're actually testing
          echo "üîç Verifying GitOps sources:"
          flux get sources git

          echo "üéØ GitOps Configuration Application Scope"
          echo "========================================="
          echo "‚úÖ Flux system installation: COMPLETED"
          echo "‚úÖ GitRepository source (hostk8s-self): COMPLETED"
          echo "‚è≥ Kustomizations: APPLYING NOW..."
          echo "‚è≥ Application deployments: APPLYING NOW..."
          echo ""

          # Apply GitOps application configurations
          echo "üì¶ Applying GitOps application configurations..."
          if [ -d "software/stamp/apps" ]; then
            echo "üîç Files to be applied from software/stamp/apps:"
            find software/stamp/apps -name "*.yaml" ! -name "kustomization.yaml" -exec echo "   - {}" \;
            echo ""
            # Apply only the actual Kubernetes resources, not kustomization.yaml
            find software/stamp/apps -name "*.yaml" ! -name "kustomization.yaml" -exec echo "üìÑ Applying: {}" \; -exec kubectl apply -f {} \; || echo "No apps directory found, skipping"
          else
            echo "üìÇ No software/stamp/apps directory found, skipping application configs"
          fi
          echo ""

          # Apply cluster-specific configurations
          echo "üéØ Applying cluster-specific configurations..."
          if [ -d "software/stamp/clusters/osdu-ci" ]; then
            echo "üîç Files to be applied from software/stamp/clusters/osdu-ci:"
            find software/stamp/clusters/osdu-ci -name "*.yaml" -exec echo "   - {}" \;
            echo ""
            find software/stamp/clusters/osdu-ci -name "*.yaml" -exec echo "üìÑ Applying: {}" \; -exec kubectl apply -f {} \; || echo "No cluster-specific configs found, skipping"
          else
            echo "üìÇ No software/stamp/clusters/osdu-ci directory found, skipping cluster configs"
          fi
          echo ""

          echo "üìä Applied Kustomizations Summary:"
          echo "================================"
          kubectl get kustomizations -A --no-headers 2>/dev/null | while read ns name rest; do
            echo "‚úÖ Kustomization: $name (namespace: $ns)"
            echo "   GitRepository source: $(kubectl get kustomization $name -n $ns -o jsonpath='{.spec.sourceRef.name}' 2>/dev/null || echo 'unknown')"
            echo "   Path: $(kubectl get kustomization $name -n $ns -o jsonpath='{.spec.path}' 2>/dev/null || echo 'unknown')"
            echo ""
          done || echo "‚ùå No Kustomizations found after application"

          # Wait for reconciliations
          echo "‚è≥ Waiting for source reconciliations..."
          sleep 60

          echo "üîÑ Triggering reconciliations with PR-specific source..."
          flux reconcile source git hostk8s-self --timeout=120s || true
          flux reconcile source helm bitnami --timeout=120s || true
          flux reconcile source helm nginx-stable --timeout=120s || true
          flux reconcile source helm prometheus-community --timeout=120s || true

          # Validate reconciliation status with PR-specific focus
          echo "üìä GitOps reconciliation status:"
          echo "================================"

          echo "üéØ Branch-Specific GitRepository Source Status:"
          flux get sources git hostk8s-self -n flux-system || echo "Branch-specific source not found"
          echo ""

          echo "üìã All Git Sources (for comparison):"
          flux get sources git -A
          echo ""

          echo "üìã Helm Sources:"
          flux get sources helm -A || echo "No Helm sources configured"
          echo ""

          echo "üìã Kustomizations:"
          flux get kustomizations -A || echo "No Kustomizations configured"
          echo ""

          echo "üìã Complete GitOps Status:"
          flux get all
          echo ""

          # Verify branch-specific source is working
          echo "üîç Branch Source Verification:"
          if flux get sources git hostk8s-self -n flux-system | grep -q "True"; then
            BRANCH_REVISION=$(flux get sources git hostk8s-self -n flux-system -o yaml | grep revision | head -1 | awk '{print $2}')
            echo "‚úÖ Branch-specific source is ready"
            echo "   Revision: $BRANCH_REVISION"
            echo "   Repository: $GITOPS_REPO"
            echo "   Branch: $GITOPS_BRANCH"
          else
            echo "‚ùå Branch-specific source is not ready"
          fi
          echo ""

          # Check for reconciliation failures
          reconciliation_status="success"
          summary=""

          # Check PR-specific source first
          if ! flux get sources git hostk8s-self -n flux-system | grep -q "True"; then
            reconciliation_status="failed"
            summary="Branch-specific GitRepository source (hostk8s-self) failed to reconcile"
          # Check other Git sources for failures
          elif flux get sources git -A | grep -E "\s+False\s+" | grep -v "True"; then
            reconciliation_status="failed"
            summary="Other Git source reconciliation failed"
          # Check Helm sources for failures
          elif flux get sources helm -A 2>/dev/null | grep -E "\s+False\s+" | grep -v "True"; then
            reconciliation_status="failed"
            summary="Helm source reconciliation failed"
          # Check Kustomizations for failures
          elif flux get kustomizations -A 2>/dev/null | grep -E "\s+False\s+" | grep -v "True"; then
            reconciliation_status="failed"
            summary="Kustomization reconciliation failed"
          # Success - PR source is ready
          else
            summary="PR-specific GitOps validation successful - Branch: $GITOPS_BRANCH"
          fi

          echo "status=$reconciliation_status" >> $GITHUB_OUTPUT
          echo "summary=$summary" >> $GITHUB_OUTPUT

          if [ "$reconciliation_status" = "failed" ]; then
            echo "‚ùå GitOps reconciliation failures detected"
            echo "üîç Flux logs:"
            flux logs --all-namespaces --since=5m
            exit 1
          else
            echo "‚úÖ Complete GitOps reconciliation successful"
          fi

  notify:
    runs-on: ubuntu-latest
    needs: [cluster-minimal, cluster-default]
    if: always()

    steps:
      - name: Report comprehensive GitOps results
        run: |
          echo "üìä HostK8s Cluster Testing Results:"
          echo "=================================="
          echo ""

          # Determine testing type
          if [ "${{ github.event.client_payload.gitlab_ref }}" = "main" ]; then
            echo "üöÄ Main Branch - Standard Testing Results:"
            echo ""
            echo "üîπ Minimal Cluster Test: ${{ needs.cluster-minimal.result }}"
            echo "   Status: ${{ needs.cluster-minimal.outputs.flux_status }}"
            echo ""
            echo "üîπ Default Cluster Test: ${{ needs.cluster-default.result }}"
            echo "   Status: ${{ needs.cluster-default.outputs.gitops_status }}"
            echo "   Summary: ${{ needs.cluster-default.outputs.reconciliation_summary }}"
          else
            echo "üîÑ PR Branch - Full Validation Results:"
            echo "üìù Branch: ${{ github.event.client_payload.gitlab_ref }}"
            echo "üéØ Testing PR branch code with GitOps pointing to PR changes"
            echo ""
            echo "üîπ Minimal Cluster Test: ${{ needs.cluster-minimal.result }}"
            echo "   Status: ${{ needs.cluster-minimal.outputs.flux_status }}"
            echo ""
            echo "üîπ Default Cluster Test: ${{ needs.cluster-default.result }}"
            echo "   Status: ${{ needs.cluster-default.outputs.gitops_status }}"
            echo "   Summary: ${{ needs.cluster-default.outputs.reconciliation_summary }}"
          fi
          echo ""

          # Overall status - simple logic that was working before
          overall_status="success"
          if [ "${{ needs.cluster-minimal.result }}" != "success" ] || [ "${{ needs.cluster-default.result }}" != "success" ]; then
            overall_status="failed"
          fi

          if [ "$overall_status" = "success" ]; then
            echo "‚úÖ All GitOps reconciliation tests passed!"
            echo "‚úÖ Flux system: HEALTHY"
            echo "‚úÖ Git sources: RECONCILED"
            echo "‚úÖ Multi-environment patterns: VALIDATED"
          else
            echo "‚ùå Some GitOps reconciliation tests failed"
            echo "‚ùå Check individual job logs for details"
          fi
          echo ""

          echo "üîó Hybrid CI/CD Summary:"
          echo "  ‚Ä¢ GitLab CI: Fast validation and tooling checks"
          echo "  ‚Ä¢ GitHub Actions: GitOps reconciliation validation"
          echo ""

          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "üîó Original GitLab Pipeline: ${{ github.event.client_payload.gitlab_pipeline_url }}"
          fi

          # Don't exit here - need to report to GitLab first
          echo "Overall status: $overall_status"

      - name: Report status back to GitLab
        if: github.event_name == 'repository_dispatch' && github.event.client_payload.gitlab_commit_sha
        run: |
          # Overall status - simple logic that was working before
          overall_status="success"
          if [ "${{ needs.cluster-minimal.result }}" != "success" ] || [ "${{ needs.cluster-default.result }}" != "success" ]; then
            overall_status="failed"
          fi

          # Prepare status message - simple version that was working
          if [ "$overall_status" = "success" ]; then
            state="success"
            description="GitOps reconciliation tests passed: Flux healthy, sources reconciled"
          else
            state="failed"
            description="GitOps reconciliation tests failed: Check logs for details"
          fi

          echo "üì§ Reporting status back to GitLab..."
          echo "Commit: ${{ github.event.client_payload.gitlab_commit_sha }}"
          echo "Status: $state"
          echo "Description: $description"

          # Report to GitLab commit status API
          curl -X POST \
            -H "PRIVATE-TOKEN: ${{ secrets.GITLAB_TOKEN }}" \
            -H "Content-Type: application/json" \
            "https://community.opengroup.org/api/v4/projects/${{ github.event.client_payload.gitlab_project_id }}/statuses/${{ github.event.client_payload.gitlab_commit_sha }}" \
            -d "{
              \"state\": \"$state\",
              \"target_url\": \"${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\",
              \"description\": \"$description\",
              \"context\": \"github-actions/cluster-testing\"
            }" || echo "‚ö†Ô∏è Failed to report to GitLab (non-blocking)"

          # Exit with failure code AFTER reporting to GitLab
          if [ "$overall_status" = "failed" ]; then
            echo "‚ùå Exiting with failure code after reporting to GitLab"
            exit 1
          fi
