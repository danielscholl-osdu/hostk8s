---
# GitLab CI/CD Pipeline for OSDU-CI Development Environment
# Hybrid approach: Fast lint validation + GitHub Actions integration testing

stages:
  - validate
  - test
  - report

validate-structure:
  stage: validate
  image: mcr.microsoft.com/azurelinux/base/core:3.0
  script:
    - echo "Validating project structure..."
    - test -f Makefile
    - test -f README.md
    - test -d infra/scripts
    - test -d software
    - echo "‚úÖ Project structure validated"

validate-makefile:
  stage: validate
  image: mcr.microsoft.com/azurelinux/base/core:3.0
  before_script:
    - tdnf install -y make bash gawk
  script:
    - echo "Validating Makefile syntax and targets..."
    - make help
    - make -n up
    - make -n test
    - echo "‚úÖ Makefile syntax validated"

validate-yaml:
  stage: validate
  image: mcr.microsoft.com/azurelinux/base/python:3.12
  before_script:
    - pip install yamllint
  script:
    - echo "Validating YAML files with relaxed rules..."
    - echo "Checking GitLab CI configuration..."
    - yamllint -c .yamllint.yaml .gitlab-ci.yml
    - echo "Checking GitHub Actions workflows..."
    - find .github/workflows -name "*.yml" -o -name "*.yaml" | xargs yamllint -c .yamllint.yaml
    - echo "Checking Kubernetes manifests..."
    - find software -name "*.yaml" -o -name "*.yml" | xargs yamllint -c .yamllint.yaml
    - find infra -name "*.yaml" -o -name "*.yml" | xargs yamllint -c .yamllint.yaml
    - echo "‚úÖ All YAML files validated with relaxed rules"

github-sync:
  stage: test
  image: mcr.microsoft.com/azurelinux/base/python:3.12
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  before_script:
    - tdnf install -y git ca-certificates
    - git config --global http.sslVerify true
  script:
    - echo "Starting sync process with Azure Linux Python 3.12"
    - ls -la .gitlab/scripts/sync-to-github.sh
    - chmod +x .gitlab/scripts/sync-to-github.sh
    - ./.gitlab/scripts/sync-to-github.sh
  when: on_success
  allow_failure: false

github-gitops-test:
  stage: test
  image: mcr.microsoft.com/azurelinux/base/core:3.0
  variables:
    GIT_STRATEGY: none
  before_script:
    - tdnf install -y curl ca-certificates
  script:
    - echo "Waiting for GitHub sync to complete..."
    - sleep 30
    - test -n "$GITHUB_TOKEN" || (echo "GITHUB_TOKEN not configured" && exit 0)
    - test -n "$GITHUB_REPO" || (echo "GITHUB_REPO not configured" && exit 0)
    - echo "Triggering GitOps reconciliation testing on $GITHUB_REPO..."
    - >
      curl -X POST
      -H "Authorization: token $GITHUB_TOKEN"
      -H "Accept: application/vnd.github.v3+json"
      https://api.github.com/repos/$GITHUB_REPO/dispatches
      -d "{\"event_type\":\"gitlab-ci-success\",
      \"client_payload\":{
      \"gitlab_pipeline_id\":\"$CI_PIPELINE_ID\",
      \"gitlab_commit_sha\":\"$CI_COMMIT_SHA\",
      \"gitlab_ref\":\"$CI_COMMIT_REF_NAME\",
      \"gitlab_pipeline_url\":\"$CI_PIPELINE_URL\",
      \"trigger_source\":\"gitlab-ci\",
      \"test_type\":\"gitops-reconciliation\"}}"
    - echo "GitHub GitOps testing triggered successfully on $GITHUB_REPO"
    - echo "Setting pending status for GitHub Actions..."
    - test -n "$GITLAB_TOKEN" || (echo "GITLAB_TOKEN not configured for status updates" && exit 0)
    - >
      curl -X POST
      -H "PRIVATE-TOKEN: $GITLAB_TOKEN"
      -H "Content-Type: application/json"
      https://community.opengroup.org/api/v4/projects/1595/statuses/$CI_COMMIT_SHA
      -d "{\"state\": \"running\",
      \"target_url\": \"https://github.com/$GITHUB_REPO/actions\",
      \"description\": \"GitOps reconciliation tests are running...\",
      \"context\": \"github-actions/gitops-testing\"}" || echo "Failed to set pending status (non-blocking)"
  when: on_success
  allow_failure: true
  needs: ["github-sync"]

github-status-info:
  stage: report
  image: mcr.microsoft.com/azurelinux/base/core:3.0
  variables:
    GIT_STRATEGY: none
  script:
    - |
      echo "üìä Hybrid CI/CD Pipeline Status Report"
      echo "====================================="
      echo ""
      echo "‚úÖ GitLab CI: Fast validation completed successfully"
      echo "   ‚Ä¢ Project structure validated"
      echo "   ‚Ä¢ Makefile syntax checked"
      echo "   ‚Ä¢ YAML files validated"
      echo "   ‚Ä¢ Code synced to GitHub"
      echo ""
      if [ -n "$GITHUB_TOKEN" ] && [ -n "$GITHUB_REPO" ]; then
        echo "üöÄ GitHub Actions: GitOps reconciliation tests triggered"
        echo "   ‚Ä¢ Tests are running comprehensive Kubernetes validation"
        echo "   ‚Ä¢ Results will appear as commit status when complete"
        echo "   ‚Ä¢ View progress: https://github.com/$GITHUB_REPO/actions"
        echo ""
        echo "üìç How to see GitHub test results:"
        echo "   1. Check commit status indicators in GitLab (üü¢ success / üî¥ failed)"
        echo "   2. Or visit: https://github.com/$GITHUB_REPO/actions"
        echo ""
        echo "‚è±Ô∏è  Results typically available within 5-10 minutes"
      else
        echo "‚ÑπÔ∏è  GitHub Actions integration not configured"
        echo "   ‚Ä¢ GITHUB_TOKEN or GITHUB_REPO variables missing"
        echo "   ‚Ä¢ Only GitLab CI validation completed"
      fi
      echo ""
      echo "üîó This approach provides:"
      echo "   ‚Ä¢ Fast feedback via GitLab CI (< 4 minutes)"
      echo "   ‚Ä¢ Comprehensive validation via GitHub Actions"
      echo "   ‚Ä¢ No waiting or timeout issues"
  when: on_success
  allow_failure: false
  needs: ["github-gitops-test"]
