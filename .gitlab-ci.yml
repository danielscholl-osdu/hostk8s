---
# GitLab CI/CD Pipeline for OSDU-CI Development Environment
# Hybrid approach: Fast lint validation + GitHub Actions integration testing

stages:
  - validate
  - test
  - report

validate-structure:
  stage: validate
  image: mcr.microsoft.com/azurelinux/base/core:3.0
  script:
    - echo "Validating project structure..."
    - test -f Makefile
    - test -f README.md
    - test -d infra/scripts
    - test -d software
    - echo "‚úÖ Project structure validated"

validate-makefile:
  stage: validate
  image: mcr.microsoft.com/azurelinux/base/core:3.0
  before_script:
    - tdnf install -y make bash gawk
  script:
    - echo "Validating Makefile syntax and targets..."
    - make help
    - make -n up
    - make -n test
    - echo "‚úÖ Makefile syntax validated"

validate-yaml:
  stage: validate
  image: mcr.microsoft.com/azurelinux/base/python:3.12
  before_script:
    - pip install yamllint
  script:
    - echo "Validating YAML files with relaxed rules..."
    - echo "Checking GitLab CI configuration..."
    - yamllint -c .yamllint.yaml .gitlab-ci.yml
    - echo "Checking GitHub Actions workflows..."
    - find .github/workflows -name "*.yml" -o -name "*.yaml" | xargs yamllint -c .yamllint.yaml
    - echo "Checking Kubernetes manifests..."
    - find software -name "*.yaml" -o -name "*.yml" | xargs yamllint -c .yamllint.yaml
    - find infra -name "*.yaml" -o -name "*.yml" | xargs yamllint -c .yamllint.yaml
    - echo "‚úÖ All YAML files validated with relaxed rules"

github-sync:
  stage: test
  image: mcr.microsoft.com/azurelinux/base/python:3.12
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  before_script:
    - tdnf install -y git ca-certificates
    - git config --global http.sslVerify true
  script:
    - echo "Starting sync process with Azure Linux Python 3.12"
    - ls -la .gitlab/scripts/sync-to-github.sh
    - chmod +x .gitlab/scripts/sync-to-github.sh
    - ./.gitlab/scripts/sync-to-github.sh
  when: on_success
  allow_failure: false

github-test:
  stage: test
  image: mcr.microsoft.com/azurelinux/base/core:3.0
  variables:
    GIT_STRATEGY: none
  before_script:
    - tdnf install -y curl ca-certificates
  script:
    - echo "Waiting for GitHub sync to complete..."
    - sleep 30
    - test -n "$GITHUB_TOKEN" || (echo "GITHUB_TOKEN not configured" && exit 0)
    - test -n "$GITHUB_REPO" || (echo "GITHUB_REPO not configured" && exit 0)
    - echo "Triggering GitHub Actions on $GITHUB_REPO..."
    - >
      curl -X POST
      -H "Authorization: token $GITHUB_TOKEN"
      -H "Accept: application/vnd.github.v3+json"
      https://api.github.com/repos/$GITHUB_REPO/dispatches
      -d "{\"event_type\":\"gitlab-ci-success\",
      \"client_payload\":{
      \"gitlab_pipeline_id\":\"$CI_PIPELINE_ID\",
      \"gitlab_commit_sha\":\"$CI_COMMIT_SHA\",
      \"gitlab_ref\":\"$CI_COMMIT_REF_NAME\",
      \"gitlab_pipeline_url\":\"$CI_PIPELINE_URL\",
      \"trigger_source\":\"gitlab-ci\"}}"
    - echo "GitHub Actions triggered successfully on $GITHUB_REPO"
  when: on_success
  allow_failure: true
  needs: ["github-sync"]

github-results:
  stage: report
  image: mcr.microsoft.com/azurelinux/base/core:3.0
  variables:
    GIT_STRATEGY: none
  before_script:
    - tdnf install -y curl jq
  script:
    - echo "üîç Checking GitHub Actions results for comprehensive testing..."
    - test -n "$GITHUB_TOKEN" || (echo "GITHUB_TOKEN not configured - skipping results check" && exit 0)
    - test -n "$GITHUB_REPO" || (echo "GITHUB_REPO not configured - skipping results check" && exit 0)
    - echo "Waiting for GitHub Actions to start..."
    - sleep 60
    - echo "Polling GitHub Actions for workflow completion..."
    - |
      for i in {1..20}; do
        echo "Check $i/20 - Fetching workflow runs..."
        RUNS=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
          "https://api.github.com/repos/$GITHUB_REPO/actions/runs?event=repository_dispatch&per_page=5")

        LATEST_RUN=$(echo "$RUNS" | jq -r '.workflow_runs[0] // empty')
        if [ -n "$LATEST_RUN" ]; then
          STATUS=$(echo "$LATEST_RUN" | jq -r '.status')
          CONCLUSION=$(echo "$LATEST_RUN" | jq -r '.conclusion')
          RUN_URL=$(echo "$LATEST_RUN" | jq -r '.html_url')

          echo "üìä GitHub Actions Status: $STATUS"
          echo "üîó Run URL: $RUN_URL"

          if [ "$STATUS" = "completed" ]; then
            echo "‚úÖ GitHub Actions completed with result: $CONCLUSION"
            if [ "$CONCLUSION" = "success" ]; then
              echo "üéâ All comprehensive tests PASSED!"
              exit 0
            else
              echo "‚ùå Comprehensive tests FAILED!"
              echo "Check details at: $RUN_URL"
              exit 1
            fi
          else
            echo "‚è≥ Still running... waiting 30 seconds"
            sleep 30
          fi
        else
          echo "üîç No recent workflow runs found, waiting..."
          sleep 30
        fi
      done
      echo "‚è∞ Timeout waiting for GitHub Actions results"
      echo "Check manually at: https://github.com/$GITHUB_REPO/actions"
      exit 1
  when: on_success
  allow_failure: false
  needs: ["github-test"]
