# GitLab CI/CD Pipeline for OSDU-CI Development Environment  
# Hybrid approach: Fast validation + Tooling verification (K8s testing via GitHub Actions)

stages:
  - validate
  - test-tooling
  - trigger-comprehensive

validate-basic:
  stage: validate
  image: alpine:latest
  script:
    - echo "Testing basic GitLab CI validation approach"
    - ls -la
    - test -f Makefile
    - test -f README.md
    - test -d infra/scripts
    - test -d software
    - echo "Basic validation passed"

validate-tools:
  stage: validate  
  image: alpine:latest
  before_script:
    - apk add --no-cache make bash
  script:
    - echo "Testing make targets"
    - make help
    - make -n up
    - make -n test
    - echo "Make targets validated"

test-tooling-validation:
  stage: test-tooling
  image: docker:27.0.3
  tags:
    - docker-small
  variables:
    DOCKER_HOST: unix:///var/run/docker.sock
  before_script:
    - if [ ! -S /var/run/docker.sock ]; then echo "No Docker socket found"; exit 1; fi
    - echo "Installing tools..."
    - apk add --no-cache make bash curl jq
    - curl -Lo /usr/local/bin/kind https://kind.sigs.k8s.io/dl/v0.25.0/kind-linux-amd64
    - chmod +x /usr/local/bin/kind
    - curl -LO "https://dl.k8s.io/release/v1.31.0/bin/linux/amd64/kubectl"
    - chmod +x kubectl && mv kubectl /usr/local/bin/
    - echo "Tools ready"
  script:
    - echo "Testing tooling validation..."
    - make help
    - kind version
    - kubectl version --client
    - docker ps
    - test -f infra/scripts/cluster-up.sh
    - echo "Tooling validation completed!"

test-minimal:
  stage: trigger-comprehensive
  image: alpine:latest
  script:
    - echo "Testing minimal script"
    - ls -la
    - pwd
  when: on_success
  allow_failure: true

sync-to-github:
  stage: trigger-comprehensive
  image: alpine:latest
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: 0
  before_script:
    - apk add --no-cache git python3
  script:
    - echo "Starting sync process"
    - ls -la sync-to-github.sh
    - chmod +x sync-to-github.sh
    - ./sync-to-github.sh
  when: on_success
  allow_failure: false

trigger-github-actions:
  stage: trigger-comprehensive
  image: alpine:latest
  variables:
    GIT_STRATEGY: none
  before_script:
    - apk add --no-cache curl jq
  script:
    - echo "Waiting for GitHub sync to complete, then triggering comprehensive testing..."
    - sleep 30
    - test -n "$GITHUB_TOKEN" || (echo "GITHUB_TOKEN not configured - skipping GitHub Actions trigger" && exit 0)
    - test -n "$GITHUB_REPO" || (echo "GITHUB_REPO not configured - skipping GitHub Actions trigger" && exit 0)
    - echo "Triggering GitHub Actions with repository dispatch on $GITHUB_REPO..."
    - >
      curl -X POST 
      -H "Authorization: token $GITHUB_TOKEN" 
      -H "Accept: application/vnd.github.v3+json" 
      https://api.github.com/repos/$GITHUB_REPO/dispatches 
      -d "{\"event_type\":\"gitlab-ci-success\",\"client_payload\":{\"gitlab_pipeline_id\":\"$CI_PIPELINE_ID\",\"gitlab_commit_sha\":\"$CI_COMMIT_SHA\",\"gitlab_ref\":\"$CI_COMMIT_REF_NAME\",\"gitlab_pipeline_url\":\"$CI_PIPELINE_URL\",\"trigger_source\":\"gitlab-ci\"}}"
    - echo "GitHub Actions triggered successfully on $GITHUB_REPO"
  when: on_success
  allow_failure: true
  needs: ["sync-to-github"]