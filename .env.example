# OSDU-CI Environment Configuration
# Copy this file to .env and customize as needed
# Example: cp .env.example .env

# =============================================================================
# CLUSTER CONFIGURATION
# =============================================================================

# Cluster name (must be unique if running multiple clusters)
CLUSTER_NAME=osdu-ci

# Kubernetes version - pin to specific version for reproducibility
K8S_VERSION=v1.33.2

# Kind configuration template
# Options: default, minimal, simple (or full filename like kind-config-custom.yaml)
KIND_CONFIG=default

# =============================================================================
# INFRASTRUCTURE ADD-ONS
# =============================================================================

# MetalLB LoadBalancer provider (for LoadBalancer services)
METALLB_ENABLED=false

# NGINX Ingress Controller (for HTTP routing)
INGRESS_ENABLED=false

# Flux GitOps (for automated deployments from Git)
FLUX_ENABLED=false

# =============================================================================
# GITOPS CONFIGURATION (when FLUX_ENABLED=true)
# =============================================================================

# Git repository for GitOps deployments
GITOPS_REPO=https://community.opengroup.org/danielscholl/osdu-ci

# Git branch to sync from
GITOPS_BRANCH=main

# GitOps stamp to deploy (leave empty for Flux-only installation)
# Options: sample, osdu-ci (for future use)
GITOPS_STAMP=

# =============================================================================
# APPLICATION DEPLOYMENT
# =============================================================================

# Default application to deploy with 'make deploy'
# Options: app1 (basic NodePort), app2 (Ingress), app3 (LoadBalancer+Ingress)
APP_DEPLOY=app1

# =============================================================================
# OPTIONAL SERVICES
# =============================================================================

# Local container registry (use with --profile registry)
REGISTRY_ENABLED=false

# Monitoring stack with Prometheus/Grafana (use with --profile monitoring)
MONITORING_ENABLED=false

# =============================================================================
# USAGE EXAMPLES
# =============================================================================

# Basic cluster (no add-ons)
# make up

# Cluster with MetalLB + Ingress (for advanced testing)
# METALLB_ENABLED=true INGRESS_ENABLED=true make up

# Flux-only installation (ready for GitOps configuration)
# FLUX_ENABLED=true make up

# Complete GitOps with sample stamp
# FLUX_ENABLED=true GITOPS_STAMP=sample make up

# Convenient shortcuts
# make up sample              # Auto-enables Flux + sample stamp
# make restart sample         # Restart with sample stamp
# make up minimal             # Use minimal Kind configuration

# Manual app deployment (works with any cluster configuration)
# make deploy app1            # Basic NodePort app
# make deploy app2            # Ingress showcase (requires INGRESS_ENABLED=true)
# make deploy app3            # Production patterns (requires METALLB_ENABLED=true + INGRESS_ENABLED=true)

# Hybrid approach (GitOps foundation + manual experimentation)
# make up sample              # Start with GitOps sample stamp
# make deploy app-experimental # Layer experimental app on top

# =============================================================================
# COMMON CONFIGURATIONS
# =============================================================================

# Development (basic cluster for app development)
# FLUX_ENABLED=false
# METALLB_ENABLED=false
# INGRESS_ENABLED=false
# APP_DEPLOY=app1

# Testing (advanced features for comprehensive testing)
# FLUX_ENABLED=false
# METALLB_ENABLED=true
# INGRESS_ENABLED=true
# APP_DEPLOY=app3

# GitOps Demo (showcase GitOps patterns)
# FLUX_ENABLED=true
# GITOPS_STAMP=sample
# METALLB_ENABLED=false  # Components deployed via GitOps instead
# INGRESS_ENABLED=false  # Components deployed via GitOps instead

# Production Simulation (future osdu-ci stamp)
# FLUX_ENABLED=true
# GITOPS_STAMP=osdu-ci
# METALLB_ENABLED=false  # Managed via GitOps
# INGRESS_ENABLED=false  # Managed via GitOps
